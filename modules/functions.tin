#FUNCTION {cut}
{
	#nop {Can cut with specified field and delimiter, defaults are space for the delimiter and 1 for field.};
	#variable {functionCut.fieldIndex} {1};
	#variable {functionCut.string} {%0};
	#regexp {${functionCut.string}} {{.*}-d {.} } {#variable {functionCut.delimiter} {&2};#replace {functionCut.string} {-d &2 }};
	#else
	{
		#variable {functionCut.delimiter} { }
	};
	#regexp {${functionCut.string}} {{.*}-f {\d+} } {#variable {functionCut.field} {&2};#replace {functionCut.string} {-f &2 }};
	#else
	{
		#variable {functionCut.field} {1}
	};
	#variable {result} {};
	#parse {${functionCut.string}} {character}
	{
		#if {"$character" == "${functionCut.delimiter}"}
		{
			#math {functionCut.fieldIndex} {${functionCut.fieldIndex} + 1}
		};
		#if {${functionCut.fieldIndex} == ${functionCut.field} && "${character}" != "${functionCut.delimiter}"}
		{
			#variable {result} {${result}${character}}
		}
	}
}

#FUNCTION {list_rand}
{
	#math {result} {1d@list_size{%1}}
}

#FUNCTION {list_size}
{
	#list {%1} {size} {result}
}

#FUNCTION {separator}
{
	#nop {Takes 1 optional argument, the separator string. The default is -.};
	#if {"%1" == ""}
	{
		#script {result} {for x in $(seq $(tput cols)) ; do echo -n "-";done}
	};
	#else
	{
		#variable {functionSeparator.length} {@strlen{%1}};
		#script {functionSeparator.columns} {tput cols};
		#math {functionSeparator.columns} {${functionSeparator.columns[1]} / ${functionSeparator.length}};
		#script {result} {for x in $(seq ${functionSeparator.columns}) ; do echo -n "%1";done}
	};
	#variable {result} {${result[1]}}
}

#FUNCTION {strip_braces}
{
	#variable {result} {%1};
	#replace {result} {^\x7B} {};
	#replace {result} {\x7D$} {}
}

#FUNCTION {strlen}
{
	#nop Return the length of a string.;
	#format result {%L} {%0}
}

#VARIABLE         {functionCut}  {}
#VARIABLE         {functionSeparator}  {}
