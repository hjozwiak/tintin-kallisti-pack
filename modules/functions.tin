#FUNCTION {cut}
{
	#nop {Can cut with specified field and delimiter, defaults are space for the delimiter and 1 for field.};
	#local {fieldIndex} {1};
	#local {string} {%0};
	#regexp {${string}} {{.*}-d {.} }
	{
		#variable {delimiter} {&2};#replace {string} {-d &2 }
	};
	#else
	{
		#variable {delimiter} { }
	};
	#regexp {${string}} {{.*}-f {\d+} }
	{
		#variable {field} {&2};#replace {string} {-f &2 }
	};
	#else
	{
		#variable {field} {1}
	};
	#variable {result} {};
	#parse {${string}} {character}
	{
		#if {{$character} == {${delimiter}}}
		{
			#math {fieldIndex} {${fieldIndex} + 1}
		};
		#if {${fieldIndex} == ${field} && {${character}} != {${delimiter}}}
		{
			#variable {result} {${result}${character}}
		}
	}
}

#FUNCTION {do_hook}
{
	#nop {Note: Hook names cannot have the semicolon character in them.};
	#local {i} {0};
	#list {hook[%1]} {size} {i};
	#if {$i > 0}
	{
		#variable {hookArgsList} {};
		#variable {hookArgs} {};
		#local {j} {};
		#local {k} {};
		#list {hookArgsList} {create} {%0};
		#foreach {${hookArgsList[]}} {k}
		{
			#if {$k == 1}
			{
				#continue
			};
			#if {$k == 2}
			{
				#variable {hookArgs} {${hookArgsList[$k]}}
			};
			#else
			{
				#variable {hookArgs} {$hookArgs;${hookArgsList[$k]}}
			}
		};
		#foreach {*{hook[%1][]}} {j}
		{
			#local {exists} {@${j}{${hookArgs}}};
			#variable {exists} {$exists};
			#if {{$exists} != {@%*}}
			{
				$exists
			}
		};
		#unvariable {hookArgs};
		#unvariable {hookArgsList}
	};
	#return #nop
}

#FUNCTION {list_rand}
{
	#math {result} {1d@list_size{%1}}
}

#FUNCTION {list_size}
{
	#list {%1} {size} {result}
}

#FUNCTION {percent}
{
	#math {result} {(${%1} / ${%1_MAX}) * 100.0};
	#format {result} {%d} {$result}
}

#FUNCTION {separator}
{
	#nop {Takes 1 optional argument, the separator string. The default is -.};
	#if {{%1} == {}}
	{
		#script {result} {for x in $(seq $(tput cols)) ; do echo -n "-";done}
	};
	#else
	{
		#local {columns} {};
		#local {length} {@strlen{%1}};
		#script {columns} {tput cols};
		#math {columns} {${columns[1]} / ${length}};
		#script {result} {for x in $(seq ${columns}) ; do echo -n "%1";done}
	};
	#variable {result} {${result[1]}}
}

#FUNCTION {strip_braces}
{
	#variable {result} {%1};
	#replace {result} {^\x7B} {};
	#replace {result} {\x7D$} {}
}

#FUNCTION {strlen}
{
	#nop Return the length of a string.;
	#format result {%L} {%0}
}

#FUNCTION {var_restore}
{
	#if {&{varList[%1]}}
	{
		var {%1} {${varList[%1]}};
		#unvariable {varList[%1]}
	};
	#return #nop
}

#FUNCTION {var_save}
{
	#if {&{%1]}}
	{
		#variable {varList[%1]} {${%1}}
	};
	#return #nop
}

